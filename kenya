<!DOCTYPE html>
<html lang="nl">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GRIPlog – Honey Value Chain (Kitui) • Overlay Invulkaart + Fixes</title>
  <link rel="icon" href="assets/dorcas-logo.svg" />
  <style>
    :root{
      --bg:#f6f7fb; --card:#ffffff; --ink:#111827; --muted:#6b7280; --line:#e5e7eb;
      --brand:#0ea5a3; --danger:#ef4444; --ok:#10b981;
      --gray-50:#f9fafb; --gray-100:#f3f4f6; --gray-200:#e5e7eb; --gray-300:#d1d5db; --gray-500:#6b7280; --gray-700:#374151; --gray-800:#1f2937;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;background:var(--bg);color:var(--ink);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif}

    header{display:flex;align-items:flex-start;gap:12px;padding:12px 16px;background:var(--card);border-bottom:1px solid var(--line);position:sticky;top:0;z-index:10}
    header img{height:34px;width:auto}
    header .title{font-weight:800;font-size:18px}
    header .sub{color:var(--muted);font-size:12px}
    .header-left{display:flex;gap:12px;align-items:center}
    .header-right{margin-left:auto;text-align:right;display:flex;flex-direction:column;gap:4px;align-items:flex-end}

    .toolbar{display:grid;grid-template-columns:1fr auto;gap:8px;align-items:center;padding:10px 16px;background:#f0f5f5;border-bottom:1px solid var(--line)}
    .leftbar{display:flex;gap:8px;align-items:center}
    .rightbar{display:flex;gap:8px;align-items:center;justify-content:flex-end}

    .btn{appearance:none;border:1px solid var(--gray-300);border-radius:10px;padding:8px 12px;background:#fff;cursor:pointer;font-size:14px}
    .btn.primary{background:var(--brand);color:#fff;border-color:transparent}
    .btn:disabled{opacity:.5;cursor:not-allowed}
    /* Gray variants for Edit/Save/Delete */
    .btn.edit{background:var(--gray-100);color:var(--gray-800);border-color:var(--gray-300)}
    .btn.save{background:var(--gray-200);color:var(--gray-800);border-color:var(--gray-300);font-weight:700}
    .btn.del{background:#111827;color:#fff;border-color:#111827}

    .input, select, input[type="text"], input[type="password"], input[type="email"], input[type="date"]{border:1px solid var(--line);border-radius:8px;padding:8px 10px;background:#fff;font-size:14px}
    .chip{display:inline-flex;align-items:center;gap:6px;font-size:12px;color:var(--muted)}
    .dot{width:8px;height:8px;border-radius:999px;background:#bbb}
    .ok{background:var(--ok)}
    .user-info{font-size:12px;color:var(--ink);text-transform:lowercase}

    nav.tabs{display:flex;gap:8px;padding:10px 16px;background:var(--card);border-bottom:1px solid var(--line)}
    nav.tabs button{border:none;background:#eaf6f6;color:#065a59;padding:8px 10px;border-radius:10px;font-weight:700;cursor:pointer}
    nav.tabs button.active{background:#0ea5a3;color:#fff}
    nav.tabs .push-right{margin-left:auto}

    section{display:none;padding:14px 16px}
    section.active{display:block}

    .card{background:var(--card);border:1px solid var(--line);border-radius:12px;padding:12px;box-shadow:0 1px 2px rgba(0,0,0,.03)}
    h2{margin:0 0 6px 0;font-size:18px}
    p.help{margin:0 0 10px 0;color:var(--muted);font-size:12px}

    .sectionbar{display:flex;gap:8px;align-items:center;justify-content:space-between;margin:6px 0}
    .sectionbar .left{display:flex;gap:8px;align-items:center}
    .sectionbar .right{display:flex;gap:8px;align-items:center}

    table{width:100%;border-collapse:collapse}
    th, td{border:1px solid var(--line);padding:6px 8px;vertical-align:top;font-size:14px;background:#fff}
    th{background:#f9fbfb;text-align:left}
    thead tr.filters th{background:#fff}

    /* ID kolom minimaal, Description maximaal */
    table th:first-child, table td:first-child{width:1%;white-space:nowrap}
    /* Breedte description waar relevant (tweede kolom) */
    #tblGoals th:nth-child(2), #tblGoals td:nth-child(2),
    #tblRisks th:nth-child(2), #tblRisks td:nth-child(2),
    #tblIssues th:nth-child(2), #tblIssues td:nth-child(2),
    #tblPlans  th:nth-child(2), #tblPlans  td:nth-child(2),
    #tblQuestions th:nth-child(2), #tblQuestions td:nth-child(2),
    #tblSuggestions th:nth-child(2), #tblSuggestions td:nth-child(2),
    #tblNotifications th:nth-child(2), #tblNotifications td:nth-child(2){width:auto}

    .cell-text{white-space:pre-wrap}
    footer{padding:16px;color:var(--muted);font-size:12px}

    /* === Overlay (Invulkaart) === */
    #overlay{position:fixed;inset:0;display:none;z-index:1000}
    #overlay.show{display:block}
    .ov-backdrop{position:absolute;inset:0;background:rgba(15,23,42,.55);backdrop-filter:blur(2px)}
    .ov-panel{position:absolute;inset:24px;display:flex;flex-direction:column;background:var(--card);border:1px solid var(--line);border-radius:16px;box-shadow:0 20px 60px rgba(0,0,0,.25);overflow:hidden}
    .ov-header{display:flex;gap:12px;align-items:center;justify-content:space-between;padding:12px 16px;border-bottom:1px solid var(--line);background:linear-gradient(180deg,#fff,#f8fafc)}
    .ov-title{font-weight:800;font-size:16px}
    .ov-sub{font-size:12px;color:var(--muted)}
    .ov-body{padding:12px 16px;overflow:auto}
    .ov-footer{padding:12px 16px;border-top:1px solid var(--line);display:flex;gap:8px;justify-content:space-between;align-items:center}
    .ov-actions{display:flex;gap:8px}
    .ov-grid{display:grid;grid-template-columns:repeat(12,1fr);gap:12px}
    .block{grid-column:span 12;background:#fff;border:1px solid var(--line);border-radius:12px;padding:12px}
    .form-row{display:grid;grid-template-columns:160px 1fr;gap:10px;margin:8px 0}
    .form-row label{color:var(--muted);font-size:12px;padding-top:6px}
    .form-row input,.form-row textarea,.form-row select{width:100%;padding:8px 10px;border:1px solid var(--line);border-radius:8px;background:#fff;font-size:14px}
    .form-row textarea{min-height:120px;resize:vertical}

    /* === Overlay split: editor + boomgrafiek === */
    .ov-split{display:flex;gap:16px;min-height:360px}
    .ov-left{flex:1.2;min-width:0}
    .ov-right{flex:0.8;min-width:280px;max-width:560px;border-left:1px solid var(--line);padding-left:12px;overflow:auto}

    /* === Tree (boomgrafiek) === */
    .tree, .tree ul{list-style:none;margin:0;padding-left:14px;position:relative}
    .tree ul:before{content:'';position:absolute;left:6px;top:0;bottom:0;border-left:1px solid #d1d5db}
    .tree li{position:relative;margin:0;padding:10px 0 0 12px}
    .tree li:before{content:'';position:absolute;left:6px;top:22px;width:10px;border-top:1px solid #d1d5db}
    .node{display:inline-flex;align-items:center;gap:8px;padding:10px 14px;border:1px solid #cbd5e1;border-radius:14px;background:linear-gradient(180deg,#fff,#f9fafb);font-weight:600;font-size:12px;box-shadow:0 2px 6px rgba(0,0,0,.06);transition:transform .15s ease, box-shadow .15s ease, border-color .15s ease;cursor:pointer}
    .node:hover{transform:translateY(-1px);box-shadow:0 6px 14px rgba(0,0,0,.08)}
    .node.current{transform:scale(1.12);border-color:#4b5563;box-shadow:0 10px 22px rgba(0,0,0,.18);padding:12px 16px;font-size:13px}
    .node.goal{background:#eef2ff;border-color:#c7d2fe}
    .node.risk{background:#fef3c7;border-color:#fde68a}
    .node.issue{background:#fee2e2;border-color:#fecaca}
    .node.plan{background:#dcfce7;border-color:#bbf7d0}
    .node.question{background:#e0f2fe;border-color:#bae6fd}
    .node.suggestion{background:#f3e8ff;border-color:#e9d5ff}
    .node small{font-weight:500;color:#6b7280;margin-left:6px}

    /* Hide user info in Q/S/N titlebars (requested) */
    #questions .user-info, #suggestions .user-info, #notifications .user-info{display:none}

  </style>
</head>
<body>
  <header>
    <div class="header-left">
      <img src="assets/dorcas-logo.svg" alt="Dorcas" onerror="this.style.display='none'">
      <div>
        <div class="title">GRIPlog – Honey Value Chain (Kitui)</div>
        <div class="sub">Goals • Risks • Issues • Plans • Questions • Suggestions • Notifications</div>
      </div>
    </div>
    <div class="header-right">
      <span class="chip"><span id="authDot" class="dot"></span><span id="authTxt">not signed in</span></span>
      <span id="userInfo" class="user-info"></span>
    </div>
  </header>

  <div class="toolbar">
    <div class="leftbar">
      <button id="btnLoad" class="btn">Load Database</button>
      <button id="btnSaveAll" class="btn primary" disabled>Save to Database</button>
    </div>
    <div class="rightbar">
      <input id="fullName" class="input" placeholder="full name *" />
      <input id="email" class="input" type="email" placeholder="email (required for editors)" />
      <input id="org" class="input" placeholder="organization *" />
      <select id="role" class="input">
        <option value="Viewer" selected>Viewer (read-only)</option>
        <option>Admin</option>
        <option>Projectmanager</option>
        <option>Strategic Program Advisor</option>
        <option>Thematic Expert</option>
      </select>
      <input id="password" class="input" type="password" placeholder="password *" />
      <button id="btnSignup" class="btn">register</button>
      <button id="btnSignin" class="btn primary">login</button>
      <button id="btnSignout" class="btn" style="display:none">logout</button>
    </div>
  </div>

  <!-- Tabs -->
  <nav class="tabs" role="tablist">
    <button class="active" data-tab="goals">G – Goals</button>
    <button data-tab="risks">R – Risks</button>
    <button data-tab="issues">I – Issues</button>
    <button data-tab="plans">P – Plans</button>
    <button class="push-right" data-tab="questions">Q – Questions</button>
    <button data-tab="suggestions">S – Suggestions</button>
    <button data-tab="notifications">N – Notifications</button>
  </nav>

  <!-- Goals -->
  <section id="goals" class="active" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Goals</h2>
          <button class="btn" id="addGoalBtn" disabled>+ New Goal</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblGoals">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Goal (SMART)</th>
            <th style="width:160px">Owner</th>
            <th style="width:130px">Start</th>
            <th style="width:130px">End</th>
            <th style="width:140px">Status</th>
            <th>Notes</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="gSearch" class="input" placeholder="search goal/notes" /></th>
            <th><select id="gOwner" class="input"></select></th>
            <th><input type="date" id="gStartFrom" class="input" /></th>
            <th><input type="date" id="gEndTo" class="input" /></th>
            <th><select id="gStatus" class="input"></select></th>
            <th></th>
            <th><button id="gReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Risks -->
  <section id="risks" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Risks</h2>
          <button class="btn" id="addRiskBtn" disabled>+ New Risk</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblRisks">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:160px">Owner</th>
            <th style="width:120px">Likelihood</th>
            <th style="width:120px">Impact</th>
            <th style="width:140px">Status</th>
            <th>Mitigation</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="rSearch" class="input" placeholder="search description/mitigation" /></th>
            <th><select id="rOwner" class="input"></select></th>
            <th><select id="rLikelihood" class="input"></select></th>
            <th><select id="rImpact" class="input"></select></th>
            <th><select id="rStatus" class="input"></select></th>
            <th></th>
            <th><button id="rReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Issues -->
  <section id="issues" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Issues</h2>
          <button class="btn" id="addIssueBtn" disabled>+ New Issue</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblIssues">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:160px">Owner</th>
            <th style="width:120px">Severity</th>
            <th style="width:140px">Status</th>
            <th>Resolution</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="iSearch" class="input" placeholder="search description/resolution" /></th>
            <th><select id="iOwner" class="input"></select></th>
            <th><select id="iSeverity" class="input"></select></th>
            <th><select id="iStatus" class="input"></select></th>
            <th></th>
            <th><button id="iReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Plans -->
  <section id="plans" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Plans</h2>
          <button class="btn" id="addPlanBtn" disabled>+ New Plan</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblPlans">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:160px">Owner</th>
            <th>Goal Link</th>
            <th style="width:130px">Start</th>
            <th style="width:130px">End</th>
            <th style="width:140px">Status</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="pSearch" class="input" placeholder="search description" /></th>
            <th><select id="pOwner" class="input"></select></th>
            <th><input type="text" id="pGoalId" class="input" placeholder="G1, G2…" /></th>
            <th></th>
            <th></th>
            <th><select id="pStatus" class="input"></select></th>
            <th><button id="pReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Questions -->
  <section id="questions" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Questions</h2>
          <button class="btn" id="addQuestionBtn">+ New Question</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblQuestions">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:160px">Owner</th>
            <th style="width:130px">Submitted</th>
            <th style="width:130px">Status</th>
            <th style="width:160px">Reviewer Role</th>
            <th style="width:130px">Reviewed</th>
            <th class="col-stars" style="width:120px">Stars</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="qSearch" class="input" placeholder="search description" /></th>
            <th><select id="qOwner" class="input"></select></th>
            <th><input type="date" id="qSubmitted" class="input" /></th>
            <th><select id="qStatus" class="input"></select></th>
            <th><select id="qReviewerRole" class="input"></select></th>
            <th><input type="date" id="qReviewed" class="input" /></th>
            <th></th>
            <th><button id="qReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Suggestions -->
  <section id="suggestions" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left">
          <h2>Suggestions</h2>
          <button class="btn" id="addSuggestionBtn">+ New Suggestion</button>
        </div>
        <div class="right"></div>
      </div>
      <table id="tblSuggestions">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:160px">Owner</th>
            <th style="width:130px">Submitted</th>
            <th style="width:130px">Status</th>
            <th style="width:160px">Reviewer Role</th>
            <th style="width:130px">Reviewed</th>
            <th class="col-stars" style="width:120px">Stars</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th></th>
            <th><input type="text" id="sSearch" class="input" placeholder="search description" /></th>
            <th><select id="sOwner" class="input"></select></th>
            <th><input type="date" id="sSubmitted" class="input" /></th>
            <th><select id="sStatus" class="input"></select></th>
            <th><select id="sReviewerRole" class="input"></select></th>
            <th><input type="date" id="sReviewed" class="input" /></th>
            <th></th>
            <th><button id="sReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </section>

  <!-- Notifications (Subject + Comments verwijderd) -->
  <section id="notifications" role="tabpanel">
    <div class="card">
      <div class="sectionbar">
        <div class="left"><h2>Notifications</h2></div>
        <div class="right"></div>
      </div>
      <table id="tblNotifications">
        <thead>
          <tr class="labels">
            <th>ID</th>
            <th>Description</th>
            <th style="width:140px">Status</th>
            <th style="width:160px">Role</th>
            <th style="width:140px">Date</th>
            <th style="width:160px">Actions</th>
          </tr>
          <tr class="filters">
            <th><input type="text" id="nId" class="input" placeholder="G1/R2/..."/></th>
            <th><input type="text" id="nSearch" class="input" placeholder="search description"/></th>
            <th><select id="nStatus" class="input"></select></th>
            <th><select id="nRole" class="input"></select></th>
            <th><input type="date" id="nFrom" class="input"/> – <input type="date" id="nTo" class="input"/></th>
            <th><button id="nReset" class="btn">Reset</button></th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
      <p class="help">Only <strong>Admin</strong> can edit or delete rows in this logbook.</p>
    </div>
  </section>

  <footer>© <span id="yr"></span> Dorcas / GRIPlog – role-based viewer/editor.</footer>

  <!-- Overlay Invulkaart -->
  <div id="overlay" aria-hidden="true">
    <div class="ov-backdrop"></div>
    <div class="ov-panel">
      <div class="ov-header">
        <div>
          <div class="ov-title" id="ovTitle">Invulkaart</div>
          <div class="ov-sub" id="ovSub">Direct bewerken staat aan</div>
        </div>
        <div><button id="ovClose" class="btn">Close</button></div>
      </div>
      <div class="ov-body">
        <div class="ov-split">
          <div class="ov-left">
            <div class="block">
              <div class="form-row"><label>ID</label><input id="f_id" disabled /></div>
              <div class="form-row" id="row_goal"><label>Goal</label><textarea id="f_goal" placeholder="SMART goal..."></textarea></div>
              <div class="form-row" id="row_desc"><label>Description</label><textarea id="f_desc" placeholder="Beschrijf..."></textarea></div>
              <div class="form-row" id="row_notes"><label>Notes</label><textarea id="f_notes" placeholder="Notities..."></textarea></div>

              <div class="form-row"><label>Owner</label><select id="f_owner"></select></div>

              <!-- Goal Link veld voor NEW PLAN is weggelaten op verzoek -->
              <div class="form-row" id="row_goalId" style="display:none"><label>Goal Link</label><input id="f_goalId" placeholder="G1, G2…" /></div>

              <div class="form-row" id="row_like"><label>Likelihood</label><select id="f_like"></select></div>
              <div class="form-row" id="row_imp"><label>Impact / Severity</label><select id="f_imp"></select></div>
              <div class="form-row"><label>Status</label><select id="f_status"></select></div>

              <div class="form-row" id="row_start"><label>Start</label><input type="date" id="f_start" /></div>
              <div class="form-row" id="row_end"><label>End</label><input type="date" id="f_end" /></div>

              <div class="form-row" id="row_res"><label>Resolution / Mitigation</label><textarea id="f_res"></textarea></div>

              <!-- Q/S meta (subject/comments verwijderd) -->
              <div class="form-row" id="row_submitted"><label>Submitted</label><input type="date" id="f_submitted" /></div>
              <div class="form-row" id="row_reviewed"><label>Reviewed</label><input type="date" id="f_reviewed" /></div>
              <div class="form-row" id="row_revrole"><label>Reviewer Role</label><select id="f_revrole"></select></div>

            </div>
          </div>
          <div class="ov-right">
            <h4>Boomgrafiek</h4>
            <div id="treeWrap" style="min-height:280px;overflow:auto">
              <ul class="tree" id="treeRoot">
                <!-- Dynamisch gevuld -->
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div class="ov-footer">
        <div class="ov-actions">
          <button id="ovEdit" class="btn edit">Edit</button>
          <button id="ovSave" class="btn save">Save</button>
          <button id="ovDelete" class="btn del">Delete</button>
        </div>
        <span class="chip" id="ovHint">Wijzigingen worden opgeslagen in Firestore.</span>
      </div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-app.js";
    import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, updateProfile } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-auth.js";
    import { getFirestore, collection, getDocs, setDoc, doc, getDoc, deleteDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyAcIiKWweeFZDDwkpnj-triuetWY0zwkps",
      authDomain: "griplog.firebaseapp.com",
      projectId: "griplog",
      storageBucket: "griplog.appspot.com",
      messagingSenderId: "1097061844582",
      appId: "1:1097061844582:web:5fc1c25e320af9c9384fa7"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);

    const $ = (q,root=document)=>root.querySelector(q);
    const $$ = (q,root=document)=>Array.from(root.querySelectorAll(q));
    $('#yr').textContent = new Date().getFullYear();

    // --- constants ----
    const EDIT_ROLES = new Set(['Admin','Projectmanager','Strategic Program Advisor','Thematic Expert']);
    const ownerRoles = ['Admin','Projectmanager','Strategic Program Advisor','Thematic Expert','Partner/Sponsor'];
    const owners = ["","Coop Board","Kamaki Cooperative","QA Manager","Operations Lead","Value Add Manager","MRDP Field Coord.","SEKU (QA Lab)","Finance Lead","Sales Lead","County Govt Kitui","Dorcas Kenya","Program Manager","Procurement","FFS Coordinator"];
    const statuses = { goals:["","Open","In progress","Done"], risks:["","Open","In progress","Done"], issues:["","Open","In progress","Blocked","Done"], plans:["","Open","In progress","Done"], qs:["","Approved","Pending","Dismissed"] };
    const tri=["","Low","Medium","High"];

    // cache
    let CAN_EDIT=false; let CURRENT_UID=null; let CURRENT_ROLE='Viewer'; let CURRENT_NAME='';
    let cache={goals:[],risks:[],issues:[],plans:[],suggestions:[],questions:[],notifications:[]};
    let prevCache=JSON.parse(JSON.stringify(cache));
    let DATA_READY=false;

    // --- Login field persistence (localStorage) ---
    const LS_KEYS = ["fullName","email","org","role","password"];
    function loadLoginFromLS(){
      LS_KEYS.forEach(k=>{
        const v = localStorage.getItem("grip_"+k);
        if(v!=null){ const el=$("#"+k); if(el){ if(el.tagName==="SELECT"){ el.value=v } else { el.value=v } } }
      });
    }
    function wireLoginPersistence(){
      LS_KEYS.forEach(k=>{
        const el=$("#"+k);
        if(!el) return;
        el.addEventListener("input",()=>localStorage.setItem("grip_"+k, el.value));
      });
    }
    loadLoginFromLS();
    wireLoginPersistence();

    // --- Auth ---
    $('#btnSignup').onclick=async ()=>{
      const fullName=$('#fullName').value.trim(); const email=($('#email').value||'').trim(); const org=$('#org').value.trim(); const role=$('#role').value; const pass=$('#password').value;
      if(!fullName||!org||!pass){ alert('fill required fields'); return; }
      if(EDIT_ROLES.has(role) && !email){ alert('email required for editors'); return; }
      const used=email || (fullName.trim().toLowerCase().replace(/[^a-z0-9]+/g,'').slice(0,40)+"@griplog.local");
      try{
        const cred=await createUserWithEmailAndPassword(auth, used, pass);
        await updateProfile(cred.user,{displayName:fullName});
        await setDoc(doc(db,'users',cred.user.uid),{ fullName, email: email||'', org, role, createdAt: new Date().toISOString() }, {merge:true});
        alert('registered. please login.');
        await signOut(auth);
      }catch(e){ alert(e.code==='auth/email-already-in-use' ? 'account exists. login.' : e.message); }
    };
    $('#btnSignin').onclick=async ()=>{
      const fullName=$('#fullName').value.trim(); const email=($('#email').value||'').trim(); const rolePick=$('#role').value; const pass=$('#password').value;
      if(!fullName||!pass){ alert('fill required fields'); return; }
      if(EDIT_ROLES.has(rolePick) && !email){ alert('email required for editors'); return; }
      const used=email || (fullName.trim().toLowerCase().replace(/[^a-z0-9]+/g,'').slice(0,40)+"@griplog.local");
      try{
        const cred=await signInWithEmailAndPassword(auth, used, pass);
        if(EDIT_ROLES.has(rolePick) && email){
          await setDoc(doc(db,'users',cred.user.uid),{ role: rolePick, email, fullName }, {merge:true});
        }
      }catch(e){ alert('login failed: '+e.message); }
    };
    $('#btnSignout').onclick=()=>signOut(auth);

    async function getUserDoc(uid){
      try{ const s=await getDoc(doc(db,'users',uid)); return s.exists()? s.data(): null }catch{ return null }
    }

    onAuthStateChanged(auth, async (user)=>{
      const authDot=$('#authDot'), authTxt=$('#authTxt'), userInfo=$('#userInfo');
      if(!user){ authDot.classList.remove('ok'); authTxt.textContent='not signed in'; userInfo.textContent=''; $('#btnSignout').style.display='none'; setEditMode(false); CURRENT_UID=null; CURRENT_ROLE='Viewer'; CURRENT_NAME=''; return; }
      $('#btnSignout').style.display='inline-block'; authDot.classList.add('ok'); CURRENT_UID=user.uid; CURRENT_NAME=user.displayName||user.email||'';
      let role='Viewer', full=user.displayName||user.email||'';
      const d=await getUserDoc(user.uid);
      if(d){ role=d.role||role; full=d.fullName||full; if(EDIT_ROLES.has(role) && !(user.email&&user.email.length)) role='Viewer'; }
      CURRENT_ROLE=role; CURRENT_NAME=full;
      const isEditor = EDIT_ROLES.has(role) && !!user.email;
      authTxt.textContent = isEditor? 'editor' : 'viewer';
      userInfo.textContent = `${(full||'').toLowerCase()} – ${role.toLowerCase()}`;
      setEditMode(isEditor);
      await loadAll();
      DATA_READY=true;
      disableNewButtons(false);
    });

    function setEditMode(can){
      CAN_EDIT=!!can;
      $('#btnSaveAll').disabled=!CAN_EDIT;
      ['addGoalBtn','addRiskBtn','addIssueBtn','addPlanBtn','addSuggestionBtn','addQuestionBtn'].forEach(id=>{ const el=$("#"+id); if(el) el.disabled=!CAN_EDIT; });
    }

    function disableNewButtons(disabled=true){
      ['addGoalBtn','addRiskBtn','addIssueBtn','addPlanBtn','addSuggestionBtn','addQuestionBtn'].forEach(id=>{ const el=$("#"+id); if(el) el.disabled=disabled; });
    }

    // Tabs
    $$('.tabs button').forEach(btn=>btn.addEventListener('click',()=>{
      $$('.tabs button').forEach(b=>b.classList.remove('active')); btn.classList.add('active');
      const tab=btn.dataset.tab; $$('section').forEach(s=>s.classList.remove('active')); $('#'+tab).classList.add('active');
      renderTab(tab);
    }));

    // Load/Save
    async function loadAll(){
      const [g,r,i,p,s,q] = await Promise.all([
        getDocs(collection(db,'goals')),
        getDocs(collection(db,'risks')),
        getDocs(collection(db,'issues')),
        getDocs(collection(db,'plans')),
        getDocs(collection(db,'suggestions')),
        getDocs(collection(db,'questions'))
      ]);
      prevCache = JSON.parse(JSON.stringify(cache));
      cache.goals=g.docs.map(d=>({id:d.id,...d.data()}));
      cache.risks=r.docs.map(d=>({id:d.id,...d.data()}));
      cache.issues=i.docs.map(d=>({id:d.id,...d.data()}));
      cache.plans=p.docs.map(d=>({id:d.id,...d.data()}));
      cache.suggestions=s.docs.map(d=>({id:d.id,...d.data()}));
      cache.questions=q.docs.map(d=>({id:d.id,...d.data()}));
      buildFilterOptions();
      renderAll();
    }
    async function saveAll(){
      if(!CAN_EDIT){ alert('no edit rights'); return; }
      alert('All edits are done via the Overlay. Nothing to bulk-save.');
    }
    $('#btnLoad').onclick=loadAll;
    $('#btnSaveAll').onclick=saveAll;

    // Helpers
    function num(id){ const n=parseInt(String(id).replace(/\\D+/g,'')||'0',10); return isNaN(n)?0:n; }
    function escapeHtml(s){ return (s||'').replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;'); }
    function actionsCell(coll){
      return \`<div class="row-actions" style="display:flex;gap:6px">
        <button class="btn edit" data-edit="\${coll}">Edit</button>
        <button class="btn del" data-del="\${coll}">Delete</button>
      </div>\`;
    }

    // Filter selects
    function fillSelect(sel, arr, ph){ const el=$(sel); if(!el) return; el.innerHTML = arr.map((v,i)=>\`<option value="\${v}">\${i===0? (ph||'Any') : v}</option>\`).join(''); }
    function buildFilterOptions(){
      fillSelect('#gOwner', owners, 'Owner'); fillSelect('#gStatus', statuses.goals, 'Status');
      fillSelect('#rOwner', owners, 'Owner'); fillSelect('#rLikelihood', tri, 'Likelihood'); fillSelect('#rImpact', tri, 'Impact'); fillSelect('#rStatus', statuses.risks, 'Status');
      fillSelect('#iOwner', owners, 'Owner'); fillSelect('#iSeverity', tri, 'Severity'); fillSelect('#iStatus', statuses.issues, 'Status');
      fillSelect('#pOwner', owners, 'Owner'); fillSelect('#pStatus', statuses.plans, 'Status');
      // Q/S
      fillSelect('#sOwner', [''].concat(ownerRoles), 'Owner'); fillSelect('#sStatus', statuses.qs, 'Status'); fillSelect('#sReviewerRole', ['','Admin','Strategic Program Advisor','Thematic Expert','Projectmanager'], 'Reviewer Role');
      fillSelect('#qOwner', [''].concat(ownerRoles), 'Owner'); fillSelect('#qStatus', statuses.qs, 'Status'); fillSelect('#qReviewerRole', ['','Admin','Strategic Program Advisor','Thematic Expert','Projectmanager'], 'Reviewer Role');
      // Notifications
      fillSelect('#nStatus', ["","Added","Edited","Deleted","Approved","Pending","Dismissed"], 'Status');
      fillSelect('#nRole', ["","Admin","Projectmanager","Strategic Program Advisor","Thematic Expert","Viewer"], 'Role');

      ['gOwner','gStatus','gStartFrom','gEndTo','gSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderGoals));
      ['rOwner','rLikelihood','rImpact','rStatus','rSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderRisks));
      ['iOwner','iSeverity','iStatus','iSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderIssues));
      ['pOwner','pStatus','pGoalId','pSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderPlans));

      ['sOwner','sSubmitted','sStatus','sReviewerRole','sReviewed','sSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderSuggestions));
      ['qOwner','qSubmitted','qStatus','qReviewerRole','qReviewed','qSearch'].forEach(id=> $('#'+id)?.addEventListener('input', renderQuestions));

      ['nId','nSearch','nStatus','nRole','nFrom','nTo'].forEach(id=> $('#'+id)?.addEventListener('input', ()=>renderNotifications(cache.notifications)));

      $('#gReset')?.addEventListener('click', ()=>{ ['gOwner','gStatus','gStartFrom','gEndTo','gSearch'].forEach(i=>$('#'+i).value=''); renderGoals(); });
      $('#rReset')?.addEventListener('click', ()=>{ ['rOwner','rLikelihood','rImpact','rStatus','rSearch'].forEach(i=>$('#'+i).value=''); renderRisks(); });
      $('#iReset')?.addEventListener('click', ()=>{ ['iOwner','iSeverity','iStatus','iSearch'].forEach(i=>$('#'+i).value=''); renderIssues(); });
      $('#pReset')?.addEventListener('click', ()=>{ ['pOwner','pStatus','pGoalId','pSearch'].forEach(i=>$('#'+i).value=''); renderPlans(); });
      $('#sReset')?.addEventListener('click', ()=>{ ['sOwner','sSubmitted','sStatus','sReviewerRole','sReviewed','sSearch'].forEach(i=>$('#'+i).value=''); renderSuggestions(); });
      $('#qReset')?.addEventListener('click', ()=>{ ['qOwner','qSubmitted','qStatus','qReviewerRole','qReviewed','qSearch'].forEach(i=>$('#'+i).value=''); renderQuestions(); });
      $('#nReset')?.addEventListener('click', ()=>{ ['nId','nSearch','nStatus','nRole','nFrom','nTo'].forEach(i=>$('#'+i).value=''); renderNotifications(cache.notifications); });
    }

    // Renderers (sorted by numeric ID)
    function renderGoals(){ const tbody=$('#tblGoals tbody'); tbody.innerHTML=''; let rows=[...cache.goals];
      const fOwner=$('#gOwner').value; if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      const fStatus=$('#gStatus').value; if(fStatus) rows=rows.filter(r=> (r.status||'')===fStatus);
      const fStart=$('#gStartFrom').value; if(fStart) rows=rows.filter(r=> (r.start||'')>=fStart);
      const fEnd=$('#gEndTo').value; if(fEnd) rows=rows.filter(r=> (r.end||'')<=fEnd);
      const q=$('#gSearch').value?.toLowerCase()||''; if(q) rows=rows.filter(r=> ((r.goal||'')+' '+(r.notes||'')).toLowerCase().includes(q));
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        const statusSel = \`<select disabled>\${statuses.goals.map(s=>\`<option \${s===(r.status||'')?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const ownerSel = \`<select disabled>\${owners.map(o=>\`<option \${o===(r.owner||'')?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.goal||'')}</div></td>
          <td>\${ownerSel}</td>
          <td><input type="date" value="\${r.start||''}" disabled /></td>
          <td><input type="date" value="\${r.end||''}" disabled /></td>
          <td>\${statusSel}</td>
          <td><div class="cell-text">\${escapeHtml(r.notes||'')}</div></td>
          <td>\${actionsCell('goals')}</td>\`; tbody.appendChild(tr);
      });
    }
    function renderRisks(){ const tbody=$('#tblRisks tbody'); tbody.innerHTML=''; let rows=[...cache.risks];
      const fOwner=$('#rOwner').value; if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      const fL=$('#rLikelihood').value; if(fL) rows=rows.filter(r=> (r.likelihood||'')===fL);
      const fI=$('#rImpact').value; if(fI) rows=rows.filter(r=> (r.impact||'')===fI);
      const fS=$('#rStatus').value; if(fS) rows=rows.filter(r=> (r.status||'')===fS);
      const q=$('#rSearch').value?.toLowerCase()||''; if(q) rows=rows.filter(r=> ((r.description||'')+' '+(r.mitigation||'')).toLowerCase().includes(q));
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        const ownerSel = \`<select disabled>\${owners.map(o=>\`<option \${o===(r.owner||'')?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const likeSel  = \`<select disabled>\${tri.map(v=>\`<option \${v===(r.likelihood||'')?'selected':''}>\${v}</option>\`).join('')}</select>\`;
        const impSel   = \`<select disabled>\${tri.map(v=>\`<option \${v===(r.impact||'')?'selected':''}>\${v}</option>\`).join('')}</select>\`;
        const statusSel= \`<select disabled>\${statuses.risks.map(s=>\`<option \${s===(r.status||'')?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.description||'')}</div></td>
          <td>\${ownerSel}</td>
          <td>\${likeSel}</td>
          <td>\${impSel}</td>
          <td>\${statusSel}</td>
          <td><div class="cell-text">\${escapeHtml(r.mitigation||'')}</div></td>
          <td>\${actionsCell('risks')}</td>\`; tbody.appendChild(tr);
      });
    }
    function renderIssues(){ const tbody=$('#tblIssues tbody'); tbody.innerHTML=''; let rows=[...cache.issues];
      const fOwner=$('#iOwner').value; if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      const fV=$('#iSeverity').value; if(fV) rows=rows.filter(r=> (r.severity||'')===fV);
      const fS=$('#iStatus').value; if(fS) rows=rows.filter(r=> (r.status||'')===fS);
      const q=$('#iSearch').value?.toLowerCase()||''; if(q) rows=rows.filter(r=> ((r.description||'')+' '+(r.resolution||'')).toLowerCase().includes(q));
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        const ownerSel = \`<select disabled>\${owners.map(o=>\`<option \${o===(r.owner||'')?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const sevSel   = \`<select disabled>\${tri.map(v=>\`<option \${v===(r.severity||'')?'selected':''}>\${v}</option>\`).join('')}</select>\`;
        const statusSel= \`<select disabled>\${statuses.issues.map(s=>\`<option \${s===(r.status||'')?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.description||'')}</div></td>
          <td>\${ownerSel}</td>
          <td>\${sevSel}</td>
          <td>\${statusSel}</td>
          <td><div class="cell-text">\${escapeHtml(r.resolution||'')}</div></td>
          <td>\${actionsCell('issues')}</td>\`; tbody.appendChild(tr);
      });
    }
    function renderPlans(){ const tbody=$('#tblPlans tbody'); tbody.innerHTML=''; let rows=[...cache.plans];
      const fOwner=$('#pOwner').value; if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      const fS=$('#pStatus').value; if(fS) rows=rows.filter(r=> (r.status||'')===fS);
      const fG=$('#pGoalId').value.trim().toLowerCase(); if(fG) rows=rows.filter(r=> (r.goalId||'').toLowerCase().includes(fG));
      const q=$('#pSearch').value?.toLowerCase()||''; if(q) rows=rows.filter(r=> ((r.description||'')).toLowerCase().includes(q));
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        const ownerSel = \`<select disabled>\${owners.map(o=>\`<option \${o===(r.owner||'')?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const statusSel= \`<select disabled>\${statuses.plans.map(s=>\`<option \${s===(r.status||'')?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.description||'')}</div></td>
          <td>\${ownerSel}</td>
          <td><input type="text" value="\${escapeHtml(r.goalId||'')}" disabled /></td>
          <td><input type="date" value="\${r.start||''}" disabled /></td>
          <td><input type="date" value="\${r.end||''}" disabled /></td>
          <td>\${statusSel}</td>
          <td>\${actionsCell('plans')}</td>\`; tbody.appendChild(tr);
      });
    }

    // Suggestions
    function renderSuggestions(){
      const tbody=$('#tblSuggestions tbody'); tbody.innerHTML=''; let rows=[...cache.suggestions];
      const q=$('#sSearch').value?.toLowerCase()||'';
      const fOwner=$('#sOwner').value; const fSubm=$('#sSubmitted').value; const fStatus=$('#sStatus').value; const fRevRole=$('#sReviewerRole').value; const fRevDate=$('#sReviewed').value;
      if(q) rows=rows.filter(r=> ((r.description||'')+' ').toLowerCase().includes(q));
      if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      if(fSubm) rows=rows.filter(r=> (r.submitted||'')>=fSubm);
      if(fStatus) rows=rows.filter(r=> (r.status||'')===fStatus);
      if(fRevRole) rows=rows.filter(r=> (r.reviewerRole||'')===fRevRole);
      if(fRevDate) rows=rows.filter(r=> (r.reviewed||'')>=fRevDate);
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        if(r.stars==null) r.stars=0; if(!r.starredBy) r.starredBy={};
        const ownerSel   = \`<select disabled>\${[''].concat(ownerRoles).map(o=>\`<option \${o===r.owner?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const statusSel  = \`<select disabled>\${statuses.qs.map(s=>\`<option \${s===r.status?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const revRoleSel = \`<select disabled>\${['','Admin','Strategic Program Advisor','Thematic Expert','Projectmanager'].map(o=>\`<option \${o===r.reviewerRole?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.dataset.sugid=r.id; tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.description||'')}</div></td>
          <td>\${ownerSel}</td>
          <td><input type="date" value="\${r.submitted||''}" disabled /></td>
          <td>\${statusSel}</td>
          <td>\${revRoleSel}</td>
          <td><input type="date" value="\${r.reviewed||''}" disabled /></td>
          <td class="col-stars"><button class="btn" data-star-sug \${(!CURRENT_UID|| (r.starredBy&&r.starredBy[CURRENT_UID]))?'disabled':''}>⭐</button> <span data-star-count>\${r.stars||0}</span></td>
          <td>\${actionsCell('suggestions')}</td>\`; tbody.appendChild(tr);
      });
    }

    function renderQuestions(){
      const tbody=$('#tblQuestions tbody'); tbody.innerHTML=''; let rows=[...cache.questions];
      const q=$('#qSearch').value?.toLowerCase()||'';
      const fOwner=$('#qOwner').value; const fSubm=$('#qSubmitted').value; const fStatus=$('#qStatus').value; const fRevRole=$('#qReviewerRole').value; const fRevDate=$('#qReviewed').value;
      if(q) rows=rows.filter(r=> ((r.description||'')+' ').toLowerCase().includes(q));
      if(fOwner) rows=rows.filter(r=> (r.owner||'')===fOwner);
      if(fSubm) rows=rows.filter(r=> (r.submitted||'')>=fSubm);
      if(fStatus) rows=rows.filter(r=> (r.status||'')===fStatus);
      if(fRevRole) rows=rows.filter(r=> (r.reviewerRole||'')===fRevRole);
      if(fRevDate) rows=rows.filter(r=> (r.reviewed||'')>=fRevDate);
      rows.sort((a,b)=>num(a.id)-num(b.id));
      rows.forEach(r=>{
        if(r.stars==null) r.stars=0; if(!r.starredBy) r.starredBy={};
        const ownerSel   = \`<select disabled>\${[''].concat(ownerRoles).map(o=>\`<option \${o===r.owner?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const statusSel  = \`<select disabled>\${statuses.qs.map(s=>\`<option \${s===r.status?'selected':''}>\${s}</option>\`).join('')}</select>\`;
        const revRoleSel = \`<select disabled>\${['','Admin','Strategic Program Advisor','Thematic Expert','Projectmanager'].map(o=>\`<option \${o===r.reviewerRole?'selected':''}>\${o}</option>\`).join('')}</select>\`;
        const tr=document.createElement('tr'); tr.dataset.qid=r.id; tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td><div class="cell-text">\${escapeHtml(r.description||'')}</div></td>
          <td>\${ownerSel}</td>
          <td><input type="date" value="\${r.submitted||''}" disabled /></td>
          <td>\${statusSel}</td>
          <td>\${revRoleSel}</td>
          <td><input type="date" value="\${r.reviewed||''}" disabled /></td>
          <td class="col-stars"><button class="btn" data-star-q \${(!CURRENT_UID|| (r.starredBy&&r.starredBy[CURRENT_UID]))?'disabled':''}>⭐</button> <span data-star-count>\${r.stars||0}</span></td>
          <td>\${actionsCell('questions')}</td>\`; tbody.appendChild(tr);
      });
    }

    function renderNotifications(rows=[]){
      const tbody=$('#tblNotifications tbody'); tbody.innerHTML='';
      let list=[...rows];
      const idf=$('#nId').value?.trim(); const q=$('#nSearch').value?.toLowerCase()||''; const st=$('#nStatus').value; const rl=$('#nRole').value; const from=$('#nFrom').value; const to=$('#nTo').value;
      if(idf) list=list.filter(r=> (r.id||'').toLowerCase().includes(idf.toLowerCase()));
      if(q) list=list.filter(r=> ((r.description||'')).toLowerCase().includes(q));
      if(st) list=list.filter(r=> (r.status||'')===st);
      if(rl) list=list.filter(r=> (r.role||'')===rl);
      if(from) list=list.filter(r=> (r.date||'')>=from);
      if(to) list=list.filter(r=> (r.date||'')<=to);
      list.sort((a,b)=> (b.date||'').localeCompare(a.date||''));
      list.forEach(r=>{
        const tr=document.createElement('tr');
        const actions = (CURRENT_ROLE==='Admin')? \`<div class="row-actions"><button class="btn del" data-del-note>Delete</button></div>\` : '—';
        tr.innerHTML=\`
          <td>\${escapeHtml(r.id||'')}</td>
          <td>\${escapeHtml(r.description||'')}</td>
          <td>\${escapeHtml(r.status||'')}</td>
          <td>\${escapeHtml(r.role||'')}</td>
          <td>\${escapeHtml(r.date||'')}</td>
          <td>\${actions}</td>\`;
        tbody.appendChild(tr);
      });
    }

    function renderAll(){ renderGoals(); renderRisks(); renderIssues(); renderPlans(); renderSuggestions(); renderQuestions(); renderNotifications(cache.notifications); }
    function renderTab(tab){ if(tab==='goals') renderGoals(); if(tab==='risks') renderRisks(); if(tab==='issues') renderIssues(); if(tab==='plans') renderPlans(); if(tab==='suggestions') renderSuggestions(); if(tab==='questions') renderQuestions(); if(tab==='notifications') renderNotifications(cache.notifications); }
  

// ===== Overlay & Deep-link, Shortcuts, Autosave =====

const PREFIX = {goals:'G',risks:'R',issues:'I',plans:'P',questions:'Q',suggestions:'S'};

// field configs for overlay
const FIELDSETS = {
  goals: [
    ['goal','textarea','Goal (SMART)','content'],
    ['notes','textarea','Notes','content'],
    ['owner','select','Owner', owners,'meta'],
    ['status','select','Status', statuses.goals,'meta'],
    ['start','date','Start','dates'],
    ['end','date','End','dates']
  ],
  risks: [
    ['description','textarea','Description','content'],
    ['mitigation','textarea','Mitigation','content'],
    ['owner','select','Owner', owners,'meta'],
    ['likelihood','select','Likelihood', tri,'meta'],
    ['impact','select','Impact', tri,'meta'],
    ['status','select','Status', statuses.risks,'meta']
  ],
  issues: [
    ['description','textarea','Description','content'],
    ['resolution','textarea','Resolution','content'],
    ['owner','select','Owner', owners,'meta'],
    ['severity','select','Severity', tri,'meta'],
    ['status','select','Status', statuses.issues,'meta']
  ],
  plans: [
    ['description','textarea','Description','content'],
    ['goalId','text','Goal Link (e.g., G1)','meta'],
    ['owner','select','Owner', owners,'meta'],
    ['status','select','Status', statuses.plans,'meta'],
    ['start','date','Start','dates'],
    ['end','date','End','dates']
  ],
  suggestions: [
    ['description','textarea','Description','content'],
    ['comments','textarea','Comments','content'],
    ['subject','select','Subject', ["","New Goal","New Risk","New Issue","New Plan"],'meta'],
    ['owner','select','Owner', [''].concat(['Admin','Projectmanager','Strategic Program Advisor','Thematic Expert','Partner/Sponsor']),'meta'],
    ['status','select','Status', ["","Approved","Pending","Dismissed"],'meta'],
    ['reviewerRole','select','Reviewer Role', ["","Admin","Strategic Program Advisor","Thematic Expert","Projectmanager"],'meta'],
    ['submitted','date','Submitted','dates'],
    ['reviewed','date','Reviewed','dates']
  ],
  questions: [
    ['description','textarea','Description','content'],
    ['comments','textarea','Comments','content'],
    ['subject','select','Subject', ["","New Goal","New Risk","New Issue","New Plan"],'meta'],
    ['owner','select','Owner', [''].concat(['Admin','Projectmanager','Strategic Program Advisor','Thematic Expert','Partner/Sponsor']),'meta'],
    ['status','select','Status', ["","Approved","Pending","Dismissed"],'meta'],
    ['reviewerRole','select','Reviewer Role', ["","Admin","Strategic Program Advisor","Thematic Expert","Projectmanager"],'meta'],
    ['submitted','date','Submitted','dates'],
    ['reviewed','date','Reviewed','dates']
  ],
};

let OV = { coll:null, id:null, row:null, edit:false };
let _autosaveTimer = null;

function getRow(coll,id){
  const list = cache[coll]||[];
  return list.find(x => String(x.id).trim() === String(id).trim());
}
function sectionWrap(title,inner){
  return `<div class="block"><details open><summary>${title}</summary>${inner}</details></div>`;
}
function inputHtml(name,type,label,opts,value,disabled){
  const dis = disabled?'disabled':'';
  if(type==='textarea'){
    return `<div class="form-row"><label for="f_${name}">${label}</label><textarea id="f_${name}" name="${name}" ${dis}>${(value||'')}</textarea></div>`;
  }
  if(type==='select'){
    const options = (opts||[]).map(v=>`<option ${String(v)===(value||'')?'selected':''}>${v}</option>`).join('');
    return `<div class="form-row"><label for="f_${name}">${label}</label><select id="f_${name}" name="${name}" ${dis}>${options}</select></div>`;
  }
  return `<div class="form-row"><label for="f_${name}">${label}</label><input id="f_${name}" name="${name}" type="${type}" value="${value||''}" ${dis} /></div>`;
}
function collectOverlayUpdates(){
  const cfg = FIELDSETS[OV.coll]||[];
  const updates = {};
  cfg.forEach(f=>{
    const name = f[0]; const el = document.querySelector(`#ovBody [name="${name}"]`);
    if(!el) return;
    const val = el.value;
    if(String(val)!==String(OV.row[name]||'')) updates[name]=val;
  });
  return updates;
}
async function saveOverlay(updates, opts={}){
  if(!CAN_EDIT){ alert('no edit rights'); return; }
  if(!OV.coll || !OV.id) return;
  // validation
  if(OV.coll==='goals' && 'goal' in updates && (updates.goal||'').trim()===''){ alert('Goal is required'); return; }
  if(OV.coll==='plans' && 'goalId' in updates && updates.goalId && !/^G\d+$/.test(String(updates.goalId).trim())){ alert('Goal Link must look like G1, G2, ...'); return; }
  try{
    if(Object.keys(updates).length){
      await updateDoc(doc(db, OV.coll, OV.id), updates);
      Object.assign(getRow(OV.coll,OV.id), updates);
      // notifications disabled
renderTab(document.querySelector('nav.tabs button.active')?.dataset.tab);
    }
    setOverlayEdit(false);
  }catch(err){ alert('save failed: '+err.message); }
}
function renderHistory(id){
  let list = (cache.notifications||[]).filter(n=> String(n.relatedId||n.id||'')===String(id));
  list.sort((a,b)=> String(a.date||'').localeCompare(String(b.date||'')));
  if(!list.length) return '';
  const items = list.slice(-10).map(n=>`<div class="form-row"><label>${n.date||''}</label><div>${escapeHtml(n.subject||'')} – ${escapeHtml(n.status||'')}</div></div>`).join('');
  return sectionWrap('History (last 10)', items);
}

// Build and render the chain graph for the current overlay item

// Build and render the chain graph for the current overlay item
function renderLinkGraph(){
  const mount = $('#ovGraph'); if(!mount) return;
  const hasOV = (typeof OV !== 'undefined' && OV && OV.id && OV.coll);
  const nodes = {};
  ['goals','risks','issues','plans','questions','suggestions'].forEach(k=>{
    (cache[k]||[]).forEach(x=>{ nodes[x.id] = { id:x.id, coll:k, parentId:x.parentId||'', goalId:x.goalId||'', data:x }; });
  });

  const typeClass = (k)=> ({goals:'goal',risks:'risk',issues:'issue',plans:'plan',questions:'question',suggestions:'suggestion'}[k]||'');
  const label = (n)=> n.id;
  const pickTime = (d)=> d.updated || d.reviewed || d.submitted || d.end || d.start || d.createdAt || d.timestamp || '';
  const fmtDate = (v)=>{ if(!v) return ''; try{ if(/^\d{4}-\d{2}-\d{2}/.test(v)) return v; const dt=new Date(v); if(!isNaN(dt)) return dt.toISOString().slice(0,10);}catch(e){} return String(v); };

  // find root (goal)
  let rootId = '';
  if(hasOV && OV.coll==='goals'){ rootId = OV.id; }
  else if(hasOV){
    const n = nodes[OV.id];
    rootId = (n && n.goalId) ? n.goalId : '';
    // fallback: climb via parentId until a goal is found
    let cur = n; const seen = new Set();
    while(cur && !rootId && !seen.has(cur.id)){
      seen.add(cur.id);
      if(cur.coll==='goals'){ rootId = cur.id; break; }
      cur = nodes[cur.parentId||''];
    }
  }
  if(!rootId){
    mount.innerHTML = '<div class="node">Geen koppelingen gevonden</div>';
    return;
  }

  // Build adjacency
  const children = {};
  Object.values(nodes).forEach(n=>{
    const p = n.parentId || (n.coll!=='goals' && n.goalId ? n.goalId : '');
    if(!p) return;
    if(!children[p]) children[p] = [];
    children[p].push(n);
  });
  const num = (id)=> parseInt(String(id).replace(/\D+/g,''))||0;
  Object.keys(children).forEach(k=> children[k].sort((a,b)=> num(a.id)-num(b.id)));

  function nodeHtml(n){
    const isCurrent = hasOV && n.id===OV.id && n.coll===OV.coll;
    const t = fmtDate(pickTime(n.data));
    const cls = `node ${typeClass(n.coll)}${isCurrent?' current':''}`;
    let timeHtml = t ? `<span class="time">• ${t}</span>` : '';
    return `<div class="${cls}" data-id="${n.id}" data-coll="${n.coll}" tabindex="0"><span class="type">${n.coll.slice(0,-1)}</span><span class="id">${label(n)}</span>${timeHtml}</div>`;
  }

  function liHtml(n){
    const kids = children[n.id]||[];
    const block = nodeHtml(n);
    if(!kids.length) return `<li>${block}</li>`;
    return `<li>${block}<ul>${kids.map(liHtml).join('')}</ul></li>`;
  }

  const root = nodes[rootId] || {id:rootId, coll:'goals', data:{}};
  const html = `<ul class="tree">${liHtml(root)}</ul>`;
  mount.innerHTML = html;

  // Clickable nodes → open overlay for that item
  mount.querySelectorAll('.node').forEach(el=>{
    el.addEventListener('click', (ev)=>{
      const id = el.getAttribute('data-id'); const coll = el.getAttribute('data-coll');
      if(id && coll){ renderOverlay(coll, id); }
    });
    el.addEventListener('keydown', (ev)=>{
      if(ev.key==='Enter' || ev.key===' '){
        ev.preventDefault();
        const id = el.getAttribute('data-id'); const coll = el.getAttribute('data-coll');
        if(id && coll){ renderOverlay(coll, id); }
      }
    });
  });
}

function renderOverlay(coll,id){
  const row = getRow(coll,id);
  if(!row){ alert('Item not found'); return;}
  OV = { coll, id, row: JSON.parse(JSON.stringify(row)), edit:false };
  $('#ovTitle').textContent = `${coll.slice(0,1).toUpperCase()+coll.slice(1,-1)} – ${id}`;
  $('#ovSub').textContent = `Type: ${coll} • ID: ${id}`;
  $('#ovMeta').textContent = CAN_EDIT? 'editor' : 'viewer';

  const cfg = FIELDSETS[coll]||[];
  const pieces = {content:'',meta:'',dates:''};
  cfg.forEach(f=>{
    const [name,type,label,optsOrGroup,maybeGroup] = f;
    const group = (maybeGroup||optsOrGroup||'content');
    const opts  = Array.isArray(optsOrGroup)? optsOrGroup : (Array.isArray(maybeGroup)? maybeGroup : null);
    pieces[group] += inputHtml(name,type,label,opts,row[name]||'', !OV.edit);
  });

  let html = '';
  if(pieces.content) html += sectionWrap('Content', pieces.content);
  if(pieces.meta)    html += sectionWrap('Meta', pieces.meta);
  if(pieces.dates)   html += sectionWrap('Dates / Links', pieces.dates);
  html += renderHistory(id);

  $('#ovBody').innerHTML = `<div class="ov-split"><div class="ov-left"><div class="ov-grid">${html}</div></div><div class="ov-right"><h4>Koppelingen</h4><div id="ovGraph" class="tree"></div></div></div>`;
  $('#overlay').classList.add('show');
  try{ renderLinkGraph(); }catch(_e){}
  $('#ovSave').disabled = true;
  try{ setHash(Object.assign(parseHash(), {tab: coll, item: id})); }catch(_e){}
}
function closeOverlay(){ $('#overlay').classList.remove('show'); OV={coll:null,id:null,row:null,edit:false}; try{ const h=parseHash(); delete h.item; setHash(h);}catch(_e){} }
function setOverlayEdit(on){
  OV.edit = !!on;
  $$('#ovBody [name]').forEach(el=>{ el.disabled = !OV.edit; });
  $('#ovSave').disabled = !OV.edit;
}
document.addEventListener('click', (e)=>{
  const menuBtn = e.target.closest('[data-menu]');
  if(menuBtn){
    const coll = menuBtn.dataset.menu;
    const tr = menuBtn.closest('tr');
    const id = tr?.querySelector('td:first-child')?.innerText.trim();
    if(coll && id) renderOverlay(coll,id);
  }
});
$('#ovClose')?.addEventListener('click', closeOverlay);
$('#overlay')?.addEventListener('click', (e)=>{ if(e.target.classList.contains('ov-backdrop')) closeOverlay(); });
$('#ovEdit')?.addEventListener('click', ()=> setOverlayEdit(true));
$('#ovSave')?.addEventListener('click', async ()=>{
  const updates = collectOverlayUpdates();
  await saveOverlay(updates, {source:'manual'});
});
$('#ovDelete')?.addEventListener('click', async ()=>{
  if(!CAN_EDIT){ alert('no edit rights'); return; }
  const coll = OV.coll, id = OV.id;
  if(!confirm(`Delete ${id}?`)) return;
  try{
    await deleteDoc(doc(db, coll, id));
    cache[coll] = (cache[coll]||[]).filter(x=>x.id!==id);
    // notifications disabled
renderTab(coll==='suggestions'?'suggestions': (coll==='questions'?'questions': document.querySelector('nav.tabs button.active')?.dataset.tab));
    closeOverlay();
  }catch(err){ alert('delete failed: '+err.message); }
});
// autosave debounce
$('#ovBody')?.addEventListener('input', ()=>{
  if(!OV.edit) return;
  clearTimeout(_autosaveTimer);
  _autosaveTimer = setTimeout(()=>{ const updates = collectOverlayUpdates(); if(Object.keys(updates).length) saveOverlay(updates, {source:'auto'}); }, 120000);
});
// keyboard shortcuts in overlay
// Add New from overlay header
async function addNew(coll){
  if(!DATA_READY){ alert('Data wordt geladen. Probeer zo nogmaals.'); return; }

  if(!CAN_EDIT){ alert('no edit rights'); return; }
  const prefix = PREFIX[coll];
  const id = nextId(cache[coll]||[], prefix);
  const defaults = {
    goals:       (id)=>({id, goal:'', owner:'', start:'', end:'', status:'Open', notes:'', parentId:''}),
    risks:       (id)=>({id, description:'', owner:'', likelihood:'Medium', impact:'Medium', status:'Open', mitigation:'', parentId:'', goalId:''}),
    issues:      (id)=>({id, description:'', owner:'', severity:'Medium', status:'Open', resolution:'', parentId:'', goalId:''}),
    plans:       (id)=>({id, description:'', owner:'', goalId:'', start:'', end:'', status:'Open', parentId:''}),
    questions:   (id)=>({id, description:'', subject:'New Goal', owner: CURRENT_ROLE||'Viewer', submitted: new Date().toISOString().slice(0,10), status:'', reviewerRole:'', reviewed:'', comments:'', stars:0, starredBy:{}, parentId:'', goalId:''}),
    suggestions: (id)=>({id, description:'', subject:'New Goal', owner: CURRENT_ROLE||'Viewer', submitted: new Date().toISOString().slice(0,10), status:'', reviewerRole:'', reviewed:'', comments:'', stars:0, starredBy:{}, parentId:'', goalId:''}),
  };
  const row = defaults[coll](id);
  if(OV && OV.id){ row.parentId = OV.id; }
  if(OV && OV.coll==='goals' && coll!=='goals'){ row.goalId = OV.id; }
  await setDoc(doc(db, coll, id), row);
  // notifications disabled
cache[coll].push(row);
  renderTab(coll);
  renderOverlay(coll,id);
}
$('#ovAddRisk')?.addEventListener('click', ()=>addNew('risks'));
$('#ovAddIssue')?.addEventListener('click', ()=>addNew('issues'));
$('#ovAddPlan')?.addEventListener('click', ()=>addNew('plans'));
$('#ovAddQuestion')?.addEventListener('click', ()=>addNew('questions'));
$('#ovAddSuggestion')?.addEventListener('click', ()=>addNew('suggestions'));

// === Hash & Query deep linking ===
function parseHash(){ const h=location.hash.replace(/^#/,''), sp=new URLSearchParams(h); const o={}; for(const [k,v] of sp) o[k]=v; return o; }
function setHash(obj){ const h=new URLSearchParams(obj).toString(); history.replaceState(null,'', '#'+h); }
function openFromHash(){
  const h = parseHash();
  if(h.tab){
    const btn = document.querySelector(`.tabs button[data-tab="${h.tab}"]`);
    if(btn){ btn.click(); }
  }
  const urlItem = new URL(location.href).searchParams.get('item');
  if(!h.item && urlItem){ h.item = urlItem; }
  if(h.item){
    const id = h.item.trim();
    const prefix = id[0].toUpperCase();
    const coll = {G:'goals',R:'risks',I:'issues',P:'plans',Q:'questions',S:'suggestions'}[prefix];
    if(coll){ renderOverlay(coll,id); }
  }
}
// update hash when switching tabs
$$('.tabs button').forEach(btn=>btn.addEventListener('click',()=>{
  setHash(Object.assign(parseHash(), {tab: btn.dataset.tab}));
}));

// after load, honor hash

// Initial
    buildFilterOptions();
    renderAll();
  </script>

<div id="overlay" aria-hidden="true">
  <div class="ov-backdrop"></div>
  <div class="ov-panel" role="dialog" aria-modal="true" aria-labelledby="ovTitle">
    <div class="ov-header">
      <div>
        <div id="ovTitle" class="ov-title">Item</div>
        <div id="ovSub" class="ov-sub"></div>
      </div>
      <div class="ov-actions">
<button id="ovAddRisk" class="btn">+ New Risk</button>
        <button id="ovAddIssue" class="btn">+ New Issue</button>
        <button id="ovAddPlan" class="btn">+ New Plan</button>
        <button id="ovAddQuestion" class="btn">+ New Question</button>
        <button id="ovAddSuggestion" class="btn">+ New Suggestion</button>
        <button id="ovClose" class="btn">Close</button>
      </div>
    </div>
    <div id="ovBody" class="ov-body"></div>
    <div class="ov-footer">
      <div class="ov-actions">
        <button id="ovEdit" class="btn">Edit</button>
        <button id="ovSave" class="btn primary" disabled>Save</button>
        <button id="ovDelete" class="btn danger">Delete</button>
      </div>
      <span class="badge" id="ovMeta"></span>
    </div>
  </div>
</div>

</body>
</html>
